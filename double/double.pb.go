// Code generated by protoc-gen-go. DO NOT EDIT.
// source: double.proto

package double

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DoubleStringRequest struct {
	Input                string   `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoubleStringRequest) Reset()         { *m = DoubleStringRequest{} }
func (m *DoubleStringRequest) String() string { return proto.CompactTextString(m) }
func (*DoubleStringRequest) ProtoMessage()    {}
func (*DoubleStringRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_double_a8eba4d019da5363, []int{0}
}
func (m *DoubleStringRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DoubleStringRequest.Unmarshal(m, b)
}
func (m *DoubleStringRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DoubleStringRequest.Marshal(b, m, deterministic)
}
func (dst *DoubleStringRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoubleStringRequest.Merge(dst, src)
}
func (m *DoubleStringRequest) XXX_Size() int {
	return xxx_messageInfo_DoubleStringRequest.Size(m)
}
func (m *DoubleStringRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DoubleStringRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DoubleStringRequest proto.InternalMessageInfo

func (m *DoubleStringRequest) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

type DoubleStringReply struct {
	Output               string   `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoubleStringReply) Reset()         { *m = DoubleStringReply{} }
func (m *DoubleStringReply) String() string { return proto.CompactTextString(m) }
func (*DoubleStringReply) ProtoMessage()    {}
func (*DoubleStringReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_double_a8eba4d019da5363, []int{1}
}
func (m *DoubleStringReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DoubleStringReply.Unmarshal(m, b)
}
func (m *DoubleStringReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DoubleStringReply.Marshal(b, m, deterministic)
}
func (dst *DoubleStringReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoubleStringReply.Merge(dst, src)
}
func (m *DoubleStringReply) XXX_Size() int {
	return xxx_messageInfo_DoubleStringReply.Size(m)
}
func (m *DoubleStringReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DoubleStringReply.DiscardUnknown(m)
}

var xxx_messageInfo_DoubleStringReply proto.InternalMessageInfo

func (m *DoubleStringReply) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func init() {
	proto.RegisterType((*DoubleStringRequest)(nil), "double.DoubleStringRequest")
	proto.RegisterType((*DoubleStringReply)(nil), "double.DoubleStringReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DoubleServiceClient is the client API for DoubleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DoubleServiceClient interface {
	DoubleString(ctx context.Context, in *DoubleStringRequest, opts ...grpc.CallOption) (*DoubleStringReply, error)
}

type doubleServiceClient struct {
	cc *grpc.ClientConn
}

func NewDoubleServiceClient(cc *grpc.ClientConn) DoubleServiceClient {
	return &doubleServiceClient{cc}
}

func (c *doubleServiceClient) DoubleString(ctx context.Context, in *DoubleStringRequest, opts ...grpc.CallOption) (*DoubleStringReply, error) {
	out := new(DoubleStringReply)
	err := c.cc.Invoke(ctx, "/double.DoubleService/DoubleString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoubleServiceServer is the server API for DoubleService service.
type DoubleServiceServer interface {
	DoubleString(context.Context, *DoubleStringRequest) (*DoubleStringReply, error)
}

func RegisterDoubleServiceServer(s *grpc.Server, srv DoubleServiceServer) {
	s.RegisterService(&_DoubleService_serviceDesc, srv)
}

func _DoubleService_DoubleString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoubleServiceServer).DoubleString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/double.DoubleService/DoubleString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoubleServiceServer).DoubleString(ctx, req.(*DoubleStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DoubleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "double.DoubleService",
	HandlerType: (*DoubleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoubleString",
			Handler:    _DoubleService_DoubleString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "double.proto",
}

func init() { proto.RegisterFile("double.proto", fileDescriptor_double_a8eba4d019da5363) }

var fileDescriptor_double_a8eba4d019da5363 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xc9, 0x2f, 0x4d,
	0xca, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xb4, 0xb9, 0x84,
	0x5d, 0xc0, 0xac, 0xe0, 0x92, 0xa2, 0xcc, 0xbc, 0xf4, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12,
	0x21, 0x11, 0x2e, 0xd6, 0xcc, 0xbc, 0x82, 0xd2, 0x12, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20,
	0x08, 0x47, 0x49, 0x9b, 0x4b, 0x10, 0x55, 0x71, 0x41, 0x4e, 0xa5, 0x90, 0x18, 0x17, 0x5b, 0x7e,
	0x69, 0x09, 0x42, 0x2d, 0x94, 0x67, 0x14, 0xc9, 0xc5, 0x0b, 0x55, 0x9c, 0x5a, 0x54, 0x96, 0x99,
	0x9c, 0x2a, 0xe4, 0xc1, 0xc5, 0x83, 0xac, 0x5b, 0x48, 0x5a, 0x0f, 0xea, 0x22, 0x2c, 0x0e, 0x90,
	0x92, 0xc4, 0x2e, 0x59, 0x90, 0x53, 0xa9, 0xc4, 0x90, 0xc4, 0x06, 0xf6, 0x83, 0x31, 0x20, 0x00,
	0x00, 0xff, 0xff, 0xf4, 0xf9, 0x6c, 0x12, 0xd3, 0x00, 0x00, 0x00,
}
